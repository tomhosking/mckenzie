{"version":3,"sources":["App.js","serviceWorker.js","index.js","slurms.png"],"names":["ProgressBar","props","className","style","this","title","height","progress","role","width","React","Component","App","state","job_list","updateStatus","bind","retrigger","fetch","then","response","json","data","setState","catch","err","console","log","setTimeout","jobid","class","scope","textAlign","onClick","window","openPopup","src","logo","map","job","statusIcon","status","aria-hidden","color","key","id","partition","hostname","jobname","submit_time","metric","msg","deleteJob","Boolean","location","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.b839170a.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './slurms.png';\nimport './App.css';\n\n\nclass ProgressBar extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return <div>\n                <span className=\"badge\" style={{'float': 'left', 'marginTop':'2px', 'width': '10%', 'textAlign': 'right'}}>{this.props.title}</span>\n                <div className=\"progress m-0\" style={{height: '20px', 'fontSize': '10px', 'fontWeight': 'bold'}}>\n                        <div className={'p-1 progress-bar progress-bar-striped ' + ( this.props.progress < 100 ? 'bg-warning' : 'bg-success') + (this.props.progress < 100 ? ' progress-bar-animated' : '')} role=\"progressbar\" style={{width: this.props.progress+'%'}}>{this.props.progress}%</div>\n                    </div>\n            </div>\n    }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        job_list: []\n    };\n    this.updateStatus = this.updateStatus.bind(this)\n  }\n\n\n  updateStatus(retrigger = true) {\n      fetch('/api/get_jobs')\n      .then((response) => response.json())\n      .then((data) => this.setState(\n          {\n              ...this.state,\n              job_list: data['job_list']\n        })\n        )\n      .catch((err) => console.log(err))\n\n      console.log(this.state)\n      \n      if(retrigger)\n      {\n        setTimeout(this.updateStatus, 10000)\n      }\n  }\n\n  deleteJob(jobid)\n  {\n    fetch('/api/delete_job/'+jobid)\n    .then((response) => this.updateStatus(false))\n  }\n\n  componentDidMount()\n  {\n      this.updateStatus()\n  }\n\n\n  render() {\n    return <div className=\"container p-2\">\n                \n                <table class=\"table table-striped table-sm table-hover small\">\n                    <thead>\n                        <tr>\n                        <th scope=\"col\" style={{textAlign: 'center'}}>\n                            <a onClick={window.openPopup}>\n                                <img src={logo} style={{width: \"32px\", height: \"32px\"}} />\n                            </a>\n                        </th>\n                        <th scope=\"col\">Partition</th>\n                        <th scope=\"col\">Node</th>\n                        <th scope=\"col\">Name</th>\n                        <th scope=\"col\">Submitted</th>\n                        <th scope=\"col\">Status</th>\n                        <th scope=\"col\">Score</th>\n                        <th scope=\"col\">Progress</th>\n                        <th scope=\"col\">Output</th>\n                        <th scope=\"col\">&nbsp;</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            \n                            \n                            this.state.job_list.map( (job) => {\n                                console.log(job.status);\n                                var statusIcon;\n                                if (job.status == 'running')\n                                {\n                                    statusIcon = <div class=\"loader\">Running</div>\n                                }\n                                else if (job.status == 'submitted')\n                                {\n                                    statusIcon = <span class=\"fa fa-clock-o\" aria-hidden=\"true\" style={{color: \"#C0D14F\"}}></span>\n                                }\n                                else if (job.status == 'warmup')\n                                {\n                                    statusIcon = <span class=\"fa fa-flash\" aria-hidden=\"true\" style={{color: \"#C0D14F\"}}></span>\n                                }\n                                else if (job.status == 'error')\n                                {\n                                    statusIcon = <span class=\"fa fa-warning\" aria-hidden=\"true\" style={{color: \"#CF4062\"}}></span>\n                                }\n                                else if (job.status == 'timeout')\n                                {\n                                    statusIcon = <i className=\"fa fa-hourglass-end\" aria-hidden=\"true\" style={{color: \"#EE74EF\"}}></i>\n                                }\n                                else if (job.status == 'cancelled')\n                                {\n                                    statusIcon = <i className=\"fa fa-ban\" aria-hidden=\"true\" style={{color: \"#490E7D\"}}></i>\n                                }\n                                else if (job.status == 'complete')\n                                {\n                                    statusIcon = <i className=\"fa fa-check\" aria-hidden=\"true\" style={{color: \"#C0D14F\"}}></i>\n                                }\n                                else\n                                {\n                                    statusIcon = <span>{job.status}</span>\n                                }\n                                return (\n                            \n                                <tr key={job.id}>\n                                    <th scope=\"row\" style={{textAlign: 'center'}}>{job.id}</th>\n                                    <td>{job.partition}</td>\n                                    <td>{job.hostname}</td>\n                                    <td>{job.jobname}</td>\n                                    <td>{job.submit_time}</td>\n                                    <td>{statusIcon}</td>\n                                    <td>{job.metric}</td>\n                                    <td>{job.progress != null ? <ProgressBar progress={job.progress} /> : ''}</td>\n                                    <td>{job.msg}</td>\n                                    <td><button onClick={() => (this.deleteJob(job.id))} className=\"btn p-0 m-0\"><i className=\"fa fa-times-circle\" aria-hidden=\"true\" style={{color: \"red\"}}></i></button></td>\n                                </tr>\n                             )} )\n                        }\n                    </tbody>\n                </table>\n            </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/slurms.8a6a1d5b.png\";"],"sourceRoot":""}